#
# Copyright (c) 2022 Robert Bosch Manufacturing Solutions GmbH, Germany. All rights reserved.
#

name: $(Date:yyyy.MM.dd)$(Rev:.r)

pool: LinuxAgents-cntlm

parameters:
  - name: PROJECT_VERSION
    displayName: Project version. Defaults to DEV-SNAPSHOT
    type: string
    default: DEV-SNAPSHOT

trigger:
  batch: true
  branches:
    include:
      - master

pr:
  drafts: false
  branches:
    include:
      - master

schedules:
  - cron: "0 0 * * *"
    displayName: Daily midnight build
    branches:
      include:
        - master

variables:
  - group: OSS Check Variables
  - group: SonarQube
  - group: RBS Variables

resources:
  repositories:
    - repository: build
      name: bci-oss/rbs-build
      endpoint: bci-oss
      type: github
      ref: main

stages:
  - stage: build
    displayName: Build
    variables:
      FOSSID_OPTS: -Pfossid -Dfossid.build.state=STAGE
      AV_SCAN_OPTS: -Pav-scan

      SONAR_SCANNER_OPTS: -Djava.net.useSystemProxies=true -Dsonar.login=$(token)
      SONAR_BCI_MAVEN_PLUGIN_PROPS: 'sonar.scanner.metadataFilePath=$(Build.SourcesDirectory)/${{ variables.SOURCE_PATH }}/target/sonar/report-task.txt'
      SONAR_SERVICE_CONNECTION: SonarQube DevCloud

      ARTIFACTORY_SERVICE_CONNECTION: Artifactory BoschDevCloud-Nx_Base
      FOSSID_SERVICE_CONNECTION: FossID-Nx_Base

      WHITESOURCE_OPTS: -Pwhitesource-ado
      WHITESOURCE_PRODUCT_NAME: RB-Semantic-Stack
      WHITESOURCE_PROJECT_NAME: BCI-ESW-RBS-BAME-Frontend
      WHITESOURCE_OUTPUT_DIR: $(Build.SourcesDirectory)/whitesource-tools

      MAVEN_SETTINGS_PATH: $(Agent.TempDirectory)/settings.xml
      MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
      MAVEN_CMD_OPTS: -Xmx2048m -Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)
      MAVEN_BUILD_OPTS: --batch-mode --errors --settings $(MAVEN_SETTINGS_PATH)

      SOURCE_PATH: source
      NPM_CACHE_FOLDER: node_modules

    jobs:
      - job: testing
        displayName: Build and Test Application
        timeoutInMinutes: 120
        cancelTimeoutInMinutes: 5
        steps:
          - checkout: self
            displayName: Clone source repository
            path: s/${{ variables.SOURCE_PATH }}
            clean: true
            persistCredentials: true

          - script: |
              rm -f $(Build.SourcesDirectory)/.npmrc
              touch $(Build.SourcesDirectory)/.npmrc

              echo "proxy=http://127.0.0.1:3128/" >> $(Build.SourcesDirectory)/.npmrc
              echo "https-proxy=http://127.0.0.1:3128/" >> $(Build.SourcesDirectory)/.npmrc

              echo "ELECTRON_CUSTOM_DIR=v10.1.3" >> $(Build.SourcesDirectory)/.npmrc
              echo "ELECTRON_MIRROR=https://bci-dev.de.bosch.com/artifacts/sw/electron/" >> $(Build.SourcesDirectory)/.npmrc
              echo "ELECTRON_BUILDER_MIRROR=https://bci-dev.de.bosch.com/artifacts/sw/electron-builder/" >> $(Build.SourcesDirectory)/.npmrc
              echo "ELECTRON_BUILDER_BINARIES_MIRROR=https://bci-dev.de.bosch.com/artifacts/sw/electron-builder-binaries/" >> $(Build.SourcesDirectory)/.npmrc

              authInfo=$(curl -u $(ArtifactoryServerUser):$(ArtifactoryServerApiKey) https://rb-artifactory.bosch.com/artifactory/api/npm/auth)

              echo "registry=https://rb-artifactory.bosch.com/artifactory/api/npm/bci-npm-virtual/" >> $(Build.SourcesDirectory)/.npmrc
              echo "${authInfo}" >> $(Build.SourcesDirectory)/.npmrc
            displayName: Set node environements

          - script: npm install
            displayName: Install all dependencies
            continueOnError: false

          - script: npm run lint
            displayName: Run linting
            continueOnError: false

#          - script: npm run test:coverage
#            displayName: Run jest tests
#            continueOnError: false

          - script: |
              Xvfb :0 & export DISPLAY=:0
              npm run cypress:clean
              npm run cypress
            displayName: Run cypress tests
            continueOnError: false

          - publish: $(Build.SourcesDirectory)/coverage
            artifact: coverage-reports

          - publish: $(Build.SourcesDirectory)/apps/bame-e2e/cypress/reports
            artifact: cypress-reports

      - job: check
        dependsOn: testing
        displayName: OSS Check
        steps:
          - task: Cache@2
            displayName: Cache Maven dependencies
            inputs:
              key: 'maven | "$(Agent.OS)" | **/pom.xml'
              path: ${{ variables.MAVEN_CACHE_FOLDER }}

          - task: MvnSettingsGenTask@1
            displayName: Setup Maven settings
            inputs:
              TargetFile: ${{ variables.MAVEN_SETTINGS_PATH }}
              ArtifactoryServiceConnection: ${{ variables.ARTIFACTORY_SERVICE_CONNECTION }}
              FossIdServiceConnection: ${{ variables.FOSSID_SERVICE_CONNECTION }}
              Proxy: true

          - task: Maven@3
            displayName: Set project version to ${{ parameters.PROJECT_VERSION }}
            inputs:
              mavenPomFile: pom.xml
              goals: versions:set
              options: ${{ variables.MAVEN_BUILD_OPTS }} -DnewVersion=${{ parameters.PROJECT_VERSION }}
              jdkVersionOption: 1.11
              publishJUnitResults: false

          - script: rm -rf $(Build.SourcesDirectory)/node_modules
            displayName: Delete node_modules folder
            continueOnError: false

          - script: |
              rm -f $(Build.SourcesDirectory)/.npmrc
              touch $(Build.SourcesDirectory)/.npmrc

              echo "proxy=http://127.0.0.1:3128/" >> $(Build.SourcesDirectory)/.npmrc
              echo "https-proxy=http://127.0.0.1:3128/" >> $(Build.SourcesDirectory)/.npmrc

              echo "ELECTRON_CUSTOM_DIR=v10.1.3" >> $(Build.SourcesDirectory)/.npmrc
              echo "ELECTRON_MIRROR=https://bci-dev.de.bosch.com/artifacts/sw/electron/" >> $(Build.SourcesDirectory)/.npmrc
              echo "ELECTRON_BUILDER_MIRROR=https://bci-dev.de.bosch.com/artifacts/sw/electron-builder/" >> $(Build.SourcesDirectory)/.npmrc
              echo "ELECTRON_BUILDER_BINARIES_MIRROR=https://bci-dev.de.bosch.com/artifacts/sw/electron-builder-binaries/" >> $(Build.SourcesDirectory)/.npmrc

              authInfo=$(curl -u $(ArtifactoryServerUser):$(ArtifactoryServerApiKey) https://rb-artifactory.bosch.com/artifactory/api/npm/auth)

              echo "registry=https://rb-artifactory.bosch.com/artifactory/api/npm/bci-npm-virtual/" >> $(Build.SourcesDirectory)/.npmrc
              echo "${authInfo}" >> $(Build.SourcesDirectory)/.npmrc
            displayName: Set node environements

          - script: npm install --production --ignore-scripts
            displayName: Install prod dependencies
            continueOnError: false

          - task: WhiteSourceTsTask@1
            displayName: Run Whitesource scan
            inputs:
              TargetPath: ${{ variables.WHITESOURCE_OUTPUT_DIR }}
              ScanDirectory: $(Build.SourcesDirectory)
              ConfigPath: whitesource_npm.config
              whitesourceProductName: ${{ variables.WHITESOURCE_PRODUCT_NAME }}
              whitesourceProjectName: ${{ variables.WHITESOURCE_PROJECT_NAME }}
              projectVersion: ${{ parameters.PROJECT_VERSION }}
              ArtifactoryServerApiKey: $(ArtifactoryServerApiKey)
              externalEndpointArtifactoryFeed: ${{ variables.ARTIFACTORY_SERVICE_CONNECTION }}
              whitesourceUserKey: $(WhiteSourceUserKey)

          - publish: ${{ variables.WHITESOURCE_OUTPUT_DIR }}
            artifact: whitesource-tools

          - publish: $(Build.SourcesDirectory)/node_modules
            artifact: whitesource-reports

          - download: current
            artifact: coverage-reports

          - script: |
              mkdir $(Build.SourcesDirectory)/coverage
              mv $(Pipeline.Workspace)/coverage-reports/* $(Build.SourcesDirectory)/coverage
            displayName: Check path

          - task: SonarQubePrepare@5
            displayName: Setup Sonar config
            inputs:
              SonarQube: ${{ variables.SONAR_SERVICE_CONNECTION }}
              scannerMode: Other
              # Workaround for https://github.boschdevcloud.com/bios-bci-open-tools/sonar-quality-check/issues/12
              extraProperties: ${{ variables.SONAR_BCI_MAVEN_PLUGIN_PROPS }}

          - task: Maven@3
            displayName: Sonar and FossId scan
            inputs:
              mavenPomFile: pom.xml
              mavenOptions: ${{ variables.MAVEN_CMD_OPTS }}
              options: >-
                ${{ variables.MAVEN_BUILD_OPTS }}
                ${{ variables.SONAR_SCANNER_OPTS }}
                ${{ variables.FOSSID_OPTS }}
              jdkVersionOption: 1.11
              goals: clean install sonar:sonar sonar-quality-check:check-quality-gate
              publishJUnitResults: false

          - publish: $(Build.SourcesDirectory)/target/fossid/
            artifact: foss-reports

          - publish: $(Build.SourcesDirectory)/target/sonar-report/
            artifact: sonar-reports

      - job:
        dependsOn: check
        displayName: Create and Publish Artifacts
        steps:
          - task: MvnSettingsGenTask@1
            displayName: Setup Maven settings
            inputs:
              TargetFile: ${{ variables.MAVEN_SETTINGS_PATH }}
              ArtifactoryServiceConnection: ${{ variables.ARTIFACTORY_SERVICE_CONNECTION }}
              FossIdServiceConnection: ${{ variables.FOSSID_SERVICE_CONNECTION }}
              Proxy: true

          - task: Maven@3
            displayName: Set project version to ${{ parameters.PROJECT_VERSION }}
            inputs:
              mavenPomFile: pom.xml
              goals: versions:set
              options: ${{ variables.MAVEN_BUILD_OPTS }} -DnewVersion=${{ parameters.PROJECT_VERSION }}
              jdkVersionOption: 1.11
              publishJUnitResults: false

          - script: |
              rm -f $(Build.SourcesDirectory)/.npmrc
              touch $(Build.SourcesDirectory)/.npmrc

              echo "proxy=http://127.0.0.1:3128/" >> $(Build.SourcesDirectory)/.npmrc
              echo "https-proxy=http://127.0.0.1:3128/" >> $(Build.SourcesDirectory)/.npmrc

              echo "ELECTRON_CUSTOM_DIR=v10.1.3" >> $(Build.SourcesDirectory)/.npmrc
              echo "ELECTRON_MIRROR=https://bci-dev.de.bosch.com/artifacts/sw/electron/" >> $(Build.SourcesDirectory)/.npmrc
              echo "ELECTRON_BUILDER_MIRROR=https://bci-dev.de.bosch.com/artifacts/sw/electron-builder/" >> $(Build.SourcesDirectory)/.npmrc
              echo "ELECTRON_BUILDER_BINARIES_MIRROR=https://bci-dev.de.bosch.com/artifacts/sw/electron-builder-binaries/" >> $(Build.SourcesDirectory)/.npmrc

              authInfo=$(curl -u $(ArtifactoryServerUser):$(ArtifactoryServerApiKey) https://rb-artifactory.bosch.com/artifactory/api/npm/auth)

              echo "registry=https://rb-artifactory.bosch.com/artifactory/api/npm/bci-npm-virtual/" >> $(Build.SourcesDirectory)/.npmrc
              echo "${authInfo}" >> $(Build.SourcesDirectory)/.npmrc
            displayName: Set node environements

          - script: npm install
            displayName: Install all dependencies
            continueOnError: false

          - script: |
              npm run version:set
              ameVersion=${{ parameters.PROJECT_VERSION }} npm run update-imprint
            displayName: Build project for production
            continueOnError: false

          - script: npm run build:prod
            displayName: Build project for production
            continueOnError: false

          - script: |
              if ! grep Acquire::http::proxy /etc/apt/apt.conf 2>&1 &>/dev/null; then
                echo "Acquire::http::proxy \"http://127.0.0.1:3128/\";" >> /etc/apt/apt.conf
                echo "Acquire::https::proxy \"http://127.0.0.1:3128/\";" >> /etc/apt/apt.conf
              fi
              dpkg --add-architecture i386 && apt-get update && apt-get install wine32
            displayName: Set proxy settings to apt conf and install wine
            continueOnError: false

          - script: |
              rm -f $(Build.SourcesDirectory)/.npmrc
              touch $(Build.SourcesDirectory)/.npmrc

              echo "proxy=http://127.0.0.1:3128/" >> $(Build.SourcesDirectory)/.npmrc
              echo "https-proxy=http://127.0.0.1:3128/" >> $(Build.SourcesDirectory)/.npmrc

              echo "ELECTRON_CUSTOM_DIR=v10.1.3" >> $(Build.SourcesDirectory)/.npmrc
              echo "ELECTRON_MIRROR=https://bci-dev.de.bosch.com/artifacts/sw/electron/v" >> $(Build.SourcesDirectory)/.npmrc
              echo "ELECTRON_BUILDER_MIRROR=https://bci-dev.de.bosch.com/artifacts/sw/electron-builder/" >> $(Build.SourcesDirectory)/.npmrc
              echo "ELECTRON_BUILDER_BINARIES_MIRROR=https://bci-dev.de.bosch.com/artifacts/sw/electron-builder-binaries/" >> $(Build.SourcesDirectory)/.npmrc

              authInfo=$(curl -u $(ArtifactoryServerUser):$(ArtifactoryServerApiKey) https://rb-artifactory.bosch.com/artifactory/api/npm/auth)

              echo "registry=https://rb-artifactory.bosch.com/artifactory/api/npm/bci-npm-virtual/" >> $(Build.SourcesDirectory)/.npmrc
              echo "${authInfo}" >> $(Build.SourcesDirectory)/.npmrc
            displayName: Set node environements

          - script: npm run electron:ci
            displayName: Create Electron applicaton for Windows
            continueOnError: false

          - download: current
            artifact: cypress-reports

          - download: current
            artifact: foss-reports

          - download: current
            artifact: sonar-reports

          - download: current
            artifact: whitesource-tools

          - download: current
            artifact: whitesource-reports

          - script: |
              mkdir $(Build.SourcesDirectory)/cypress-reports
              mv $(Pipeline.Workspace)/cypress-reports/* $(Build.SourcesDirectory)/cypress-reports
              mkdir $(Build.SourcesDirectory)/foss-reports
              mv $(Pipeline.Workspace)/foss-reports/* $(Build.SourcesDirectory)/foss-reports
              mkdir $(Build.SourcesDirectory)/sonar-reports
              mv $(Pipeline.Workspace)/sonar-reports/* $(Build.SourcesDirectory)/sonar-reports
              mkdir $(Build.SourcesDirectory)/whitesource-tools
              mv $(Pipeline.Workspace)/whitesource-tools/* $(Build.SourcesDirectory)/whitesource-tools
              mkdir $(Build.SourcesDirectory)/whitesource-reports
              mv $(Pipeline.Workspace)/whitesource-reports/* $(Build.SourcesDirectory)/whitesource-reports
            displayName: Check path

          - template: templates/git-tag-release.yml@build
            parameters:
              PROJECT_VERSION: ${{ parameters.PROJECT_VERSION }}

          - template: templates/install-gh-cli.yml@build

          - template: templates/gh-release-notes.yml@build
            parameters:
              PROJECT_VERSION: ${{ parameters.PROJECT_VERSION }}

          - task: Maven@3
            displayName: Upload artifacts
            condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
            inputs:
              mavenPomFile: pom.xml
              mavenOptions: ${{ variables.MAVEN_CMD_OPTS }}
              options: >-
                -DskipTests
                ${{ variables.MAVEN_BUILD_OPTS }}
                -P3rd-party-sources,assemble-reports,attach-resources
              jdkVersionOption: 1.11
              goals: deploy
              publishJUnitResults: false
